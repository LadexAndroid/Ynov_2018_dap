package fr.ynov.dap.data;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;

/**
 * @author Antoine
 * a class that knows all google accounts for a specific user.
 */
@Entity
public class AppUser {
  /**
   * the unique identifier in database.
   */
  @Id
  @GeneratedValue
  private int id;
  /**
   * the identifier used by the app.
   */
  private String userKey;
  /**
   * All the googleAccounts linked to the userKey.
   */
  @OneToMany(cascade = CascadeType.ALL, mappedBy = "appUser")
  private List<GoogleAccount> googleAccounts;

  /**
   * All the microsoftAccounts linked to the userKey.
   */
  @OneToMany(cascade = CascadeType.ALL, mappedBy = "appUser")
  private List<MicrosoftAccount> microsoftAccounts;

  /**
   * get the userKey.
   * @return userKey
   */
  public String getUserKey() {
    return userKey;
  }

  /**
   * set the userKey.
   * @param userId the new userKey
   */
  public void setUserKey(final String userId) {
    this.userKey = userId;
  }

  /**
   * get All google accounts for the identifier userKey.
   * @return the google accounts that has been added
   */
  public List<GoogleAccount> getGoogleAccounts() {
    return googleAccounts;
  }

  /**
   * set the list of GoogleAccounts for the identifier userKey.
   * @param listGoogleAccounts the list that contains all accounts
   */
  public void setGoogleAccounts(final List<GoogleAccount> listGoogleAccounts) {
    this.googleAccounts = listGoogleAccounts;
  }

  /**
   * get All microsoft accounts.
   * @return a list of microsoftAccount
   */
  public List<MicrosoftAccount> getMicrosoftAccounts() {
    return microsoftAccounts;
  }

  /**
   * set the list of microsoftAccounts.
   * @param microAccounts a list a microst account
   */
  public void setMicrosoftAccounts(final List<MicrosoftAccount> microAccounts) {
    this.microsoftAccounts = microAccounts;
  }

  /**
   * get the unique identifier generated by Hibernate.
   * @return the unique id
   */
  public int getId() {
    return id;
  }

  /**
   * Add new token in credentialFolder for the user specified.
   * @param account the account for the identifier userKey
   */
  public void addGoogleAccount(final GoogleAccount account) {
    account.setAppUser(this);
    if (this.getGoogleAccounts() == null) {
      this.setGoogleAccounts(new ArrayList<GoogleAccount>());
    }
    this.getGoogleAccounts().add(account);
  }

  /**
   * Add new token in credentialFolder for the user specified.
   * @param account the account for the identifier userKey
   */
  public void addMicrosoftAccount(final MicrosoftAccount account) {
    account.setAppUser(this);
    if (this.getGoogleAccounts() == null) {
      this.setMicrosoftAccounts(new ArrayList<MicrosoftAccount>());
    }
    this.getMicrosoftAccounts().add(account);
  }

  /**
   * Creates an AppUser with a userKey to identify where to add the appUser.
   * @param appUserKey the user that identifies the googleAccount
   */
  public AppUser(final String appUserKey) {
    setUserKey(appUserKey);
  }

  /**
   * This constructor is only called by the AppUserController.
   */
  public AppUser() {
    super();
  }
}
